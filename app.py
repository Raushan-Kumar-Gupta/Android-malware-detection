import streamlit as st
import pandas as pd
import json
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
import numpy as np
import pickle


# Load or create model
try:
    with open("randomForest.pkl", "rb") as f:
        model = pickle.load(f)
except FileNotFoundError:
    print("Internal Processing error.")

# Streamlit UI
st.title("JSON Classification App")

st.header("Step 1: Upload a JSON file")
uploaded_file = st.file_uploader("Choose a JSON file", type="json")

# Preprocess Function
def preprocess_data(input_data, model):
    # Convert JSON data to a DataFrame
    df = pd.DataFrame([input_data])

    # Identify categorical columns
    categorical_columns = ["Flow ID", " Source IP", " Destination IP"]

    # Label encode categorical columns
    label_encoders = {}
    for col in categorical_columns:
        le = LabelEncoder()
        df[col] = le.fit_transform(df[col])
        label_encoders[col] = le

    # Align features to match the model's expected input
    expected_features = model.feature_names_in_
    if set(expected_features).issubset(df.columns):
        df = df[expected_features]  # Reorder columns
    else:
        missing_features = set(expected_features) - set(df.columns)
        raise ValueError(f"Missing features in input: {missing_features}")
    
    return df

class_mapping = {
    0: "Android_Adware",
    1: "Android_Scareware",
    2: "Android_SMS_Malware",
    3: "Benign"
}

if uploaded_file is not None:
    try:
        # Load JSON data
        data = json.load(uploaded_file)
        st.write("JSON Data:")
        st.json(data)

        # Preprocess the data
        st.header("Step 2: Preprocessing Data")
        try:
            input_df = preprocess_data(data, model)
            st.write("Processed DataFrame:")
            st.dataframe(input_df)
        except Exception as e:
            st.error(f"Preprocessing Error: {e}")
            st.stop()

        # Predict using the model
        st.header("Step 3: Classification Result")
        numeric_prediction = model.predict(input_df)[0]  # Get the numeric prediction
        string_prediction = class_mapping[numeric_prediction]  # Map to string label
        st.write("Predicted Class:", string_prediction)
        if string_prediction != "Benign":
            # Simulate a pop-up alert with HTML and CSS for styling
            st.markdown(
                f"""
                <div style="background-color:#FFCCCC;padding:20px;border-radius:10px;">
                    <h3 style="color:red;">⚠️ DANGER ALERT</h3>
                    <p><strong>We have detected an Android malware of type:</strong> <span style="color:black;">{string_prediction}</span></p>
                </div>
                """,
                unsafe_allow_html=True
            )
        else:
            # Green confirmation for benign result
            st.success("✔️ The application has classified the input as **Benign**. No malware detected.")


    except Exception as e:
        st.error(f"Error processing JSON file: {e}")
